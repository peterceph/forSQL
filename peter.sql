CREATE TABLE PRODUCTS (
PRODID NUMBER(4),
PRODNAME VARCHAR2(10),
PRODPRICE NUMBER(4));

INSERT INTO PRODUCTS VALUES(1001, 'WATCH', 12);
INSERT INTO PRODUCTS VALUES(1002, 'BLOWER', 34);
INSERT INTO PRODUCTS VALUES(1003, 'CAMERA', 68);

SELECT * FROM PRODUCTS

delete from products
where rowid in (select min(rowid)from products)

UPDATE  PRODUCTS
SET PRODID = 1003
WHERE PRODNAME = 'CAMERA';

ALTER TABLE EMPLOYEE
RENAME COLUMN POSITION TO JOB;


INSERT INTO PRODUCTS VALUES(1011, 'convertible REFRIGERATOR', 600);


DECLARE 
    VID PRODUCTS.PRODID%TYPE;
    VNAME PRODUCTS.PRODNAME%TYPE;
    VPRICE PRODUCTS.PRODPRICE%TYPE;
BEGIN
    VID := &PRODID;
    SELECT PRODNAME, PRODPRICE INTO VNAME, VPRICE FROM PRODUCTS
    WHERE PRODID = VID;
    DBMS_OUTPUT.PUT_LINE('PRODUCT: '|| VNAME ||' '||'PRICE: '||VPRICE);
EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('SOME VALUE INCOMPATIBLE');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('PRODUCT ID DOES NOT EXIST');
END;
/
 
 SELECT * FROM EMPLOYEE
 
 
-- EXPLICIT DECLARATION OF THE COLUMNS OF A TABLE, WHICH MAY BE TRDIOUS 
 
DECLARE
   TYPE EMPREC IS RECORD (R_ID EMPLOYEE.EMP_ID%TYPE,
                          R_NAME EMPLOYEE.EMP_NAME%TYPE,
                          R_SALARY EMPLOYEE.SALARY%TYPE,
                          R_JOB EMPLOYEE.JOB%TYPE);

    VREC EMPREC;
BEGIN 
    VREC.R_ID := &EMP_ID;

SELECT EMP_ID, EMP_NAME, SALARY, JOB INTO VREC FROM EMPLOYEE
WHERE EMP_ID = VREC.R_ID;

DBMS_OUTPUT.PUT_LINE('NAME: '|| VREC.R_NAME);
DBMS_OUTPUT.PUT_LINE('SALARY '||VREC.R_SALARY);
DBMS_OUTPUT.PUT_LINE('JOB '|| VREC.R_JOB);
EXCEPTION
WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOES NOT EXIST');
END;
/


-- NOW IMPLICITLY DECLARING THE INFORMATION OF THE ROW OF EMPLOYEE FOR THE
--PARTICULAR EMPLOYEE NUMBER ENTERED BY USER
    
    
DECLARE
   VREC EMPLOYEE%ROWTYPE;
BEGIN 
    VREC.EMP_ID := &EMP_ID;

SELECT *  INTO VREC FROM EMPLOYEE
WHERE EMP_ID = VREC.EMP_ID;

DBMS_OUTPUT.PUT_LINE('NAME: '|| VREC.EMP_NAME);
DBMS_OUTPUT.PUT_LINE('SALARY '||VREC.SALARY);
DBMS_OUTPUT.PUT_LINE('JOB '|| VREC.JOB);
DBMS_OUTPUT.PUT_LINE('BRANCH_ID '|| VREC.BRANCH_ID);

EXCEPTION
WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOES NOT EXIST');
END;
/    



Interview Question : Write a query to perform sum of different 
charges and sum of fees installments for students, where charges 
table contains two columns stid and charges, also fees table contains 
two columns stid and amount. Assume suitable data as per the narration 
of the problem



-- IF THEN END IF
DECLARE 
    NUM NUMBER;
BEGIN 
    NUM := '&NUMBER';
      IF MOD(NUM, 2) = 0 THEN
      DBMS_OUTPUT.PUT_LINE('THE NUMBER IS EVEN');
      END IF;
EXCEPTION 
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('VALUE HAS TO BE A NUMBER');
END;





-- IF THEN ELSE END IF
DECLARE 
    NUM NUMBER;
BEGIN 
    NUM := '&NUMBER';
      IF MOD(NUM, 2) = 0 THEN
            DBMS_OUTPUT.PUT_LINE('THE NUMBER IS EVEN');
      ELSE
            DBMS_OUTPUT.PUT_LINE('THE NUMBER IS ODD');

      END IF;
EXCEPTION 
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('VALUE HAS TO BE A NUMBER');        
END;




CREATE TABLE EMPLOYEES (
    EMP_ID     VARCHAR2(10) PRIMARY KEY,
    EMP_NAME   VARCHAR2(50),
    SALARY     NUMBER(10,2),
    JOB        VARCHAR2(30),
    BASIC      NUMBER(10,2),
    ALLOWANCE  NUMBER(10,2),
    HIRE_DATE  DATE
);
INSERT INTO EMPLOYEES VALUES ('E101', 'Alice Thomas',     75000, 'Manager',     50000, 25000, TO_DATE('2017-06-15', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E102', 'Brian Dsouza',     55000, 'Analyst',     40000, 15000, TO_DATE('2019-09-01', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E103', 'Chitra Sharma',    63000, 'Developer',   43000, 20000, TO_DATE('2020-01-20', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E104', 'Daniel Mathews',   47000, 'Tester',      32000, 15000, TO_DATE('2021-03-10', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E105', 'Eva Johnson',      69000, 'Team Lead',   50000, 19000, TO_DATE('2018-11-25', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E106', 'Farhan Ali',       59000, 'Developer',   42000, 17000, TO_DATE('2022-04-05', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E107', 'Grace Kumar',      51000, 'Analyst',     36000, 15000, TO_DATE('2020-08-18', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E108', 'Harish Mehta',     80000, 'Project Mgr', 60000, 20000, TO_DATE('2016-12-30', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E109', 'Ishita Rao',       46000, 'Tester',      30000, 16000, TO_DATE('2023-02-12', 'YYYY-MM-DD'));
INSERT INTO EMPLOYEES VALUES ('E110', 'Jason Pereira',    72000, 'Consultant',  52000, 20000, TO_DATE('2019-07-07', 'YYYY-MM-DD'));

SELECT * FROM EMPLOYEES



DECLARE
BASIC NUMBER;
SALARY NUMBER;
ALLOWANCE NUMBER;
MINBAS NUMBER := 1800;
MAXBAS NUMBER := 10000;
BASLIM1 NUMBER := 3000;
BASLIM2 NUMBER := 5000;
BASLIM3 NUMBER := 7000;
ALLOWANCE1 NUMBER := 120;
ALLOWANCE2 NUMBER := 130;
ALLOWANCE3 NUMBER := 140;
ALLOWANCE4 NUMBER := 150;
INVALID EXCEPTION;

BEGIN
    BASIC := '&BASIC';
    
    IF BASIC < MINBAS OR BASIC > MAXBAS THEN
    RAISE INVALID;
    ELSIF BASIC BETWEEN MINBAS AND BASLIM1 THEN
    ALLOWANCE := BASIC * ALLOWANCE1/100;
    ELSIF BASIC > BASLIM1 AND BASIC <= BASLIM2 THEN
        ALLOWANCE := BASIC * ALLOWANCE2/100;
    ELSIF BASIC >BASLIM2 AND BASIC <=BASLIM3 THEN
        ALLOWANCE := BASIC * ALLOWANCE3/100;
    ELSE
        ALLOWANCE := BASIC * ALLOWANCE4/100;
    END IF;
    SALARY := BASIC + ALLOWANCE;
    DBMS_OUTPUT.PUT_LINE('BASIC : '|| BASIC);
    DBMS_OUTPUT.PUT_LINE('ALLOWANCE : '|| ALLOWANCE);
    DBMS_OUTPUT.PUT_LINE('SALARY : '|| SALARY);
    EXCEPTION 
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('BASIC HAS TO BE NUMBER');
    WHEN INVALID THEN
        DBMS_OUTPUT.PUT_LINE('BASIC MUST BE IN VALID RANGE');
    END;
    /


DECLARE
SALARY NUMBER;
BASIC NUMBER;
ALLOWANCE NUMBER;
MINBAS NUMBER:= 1800;
MAXBAS NUMBER :=10000;
BASLIM1 NUMBER:= 3000;
BASLIM2 NUMBER := 5000;
BASLIM3 NUMBER := 7000;
ALLOWANCE1 NUMBER := 120;
ALLOWANCE2 NUMBER := 130;
ALLOWANCE3 NUMBER := 140;
ALLOWANCE4 NUMBER:= 150;
INVALID EXCEPTION;

BEGIN

BASIC := '&BASIC';

    IF BASIC < MINBAS OR BASIC > MAXBAS THEN
    RAISE INVALID;
    ELSIF BASIC BETWEEN MINBAS AND BASLIM1 THEN
    ALLOWANCE := BASIC * ALLOWANCE1/100;
    ELSIF BASIC > BASLIM1 AND BASIC <= BASLIM2 THEN
    ALLOWANCE := BASIC * ALLOWANCE2/100;
    ELSIF BASIC > BASLIM2 AND BASIC <= BASLIM3 THEN
    ALLOWANCE := BASIC * ALLOWANCE3/100;
    ELSE
    ALLOWANCE := BASIC * ALLOWANCE4/100;
    
    END IF;
    SALARY := BASIC + ALLOWANCE;
    
    DBMS_OUTPUT.PUT_LINE('BASIC  '|| BASIC);
    DBMS_OUTPUT.PUT_LINE('ALLOWANCE  '|| ALLOWANCE);
    DBMS_OUTPUT.PUT_LINE('SALARY  '|| SALARY);

    EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('BASIC MUST BE A NUMBER');
    WHEN INVALID THEN
        DBMS_OUTPUT.PUT_LINE('BASIC MUST WITHIN A VALID RANGE');
    END;
    /

    


    
        


Code for complex programs of this video :
If-then-elsif-then-else-end if;
Problem : Calculate salary with formula salary = basic + allowance
          under following terms -
          (1) basic can not be less than 1800 and more than 10,000
          (2) basic between 1800 and 3000 allownace is 120% of basic
          (3) basic above 3000 and up to 5000 allowance rate 130% of basic
          (4) basic above 5000 and up to 7000 allowance rate 140% of basic
          (5) basic above 7000 allowance rate is 150%
           Input to the program is basic
           Output print : basic, calculated allowance, and salary = basic + allowance
           
           
           
           CREATE TABLE STUDENT_MARKS(
           STID NUMBER(10),
           NAME VARCHAR2(100),
           MARKS NUMBER(10)
           );
           
           SELECT * FROM STUDENT_MARKS
           
           ALTER TABLE  STUDENT_MARKS
           RENAME COLUMN  GRADES TO GRADE;
           
           DECLARE
           
           STID NUMBER ;
           NAME VARCHAR2(50) := 'JOHN DOE';
           MARKS NUMBER;
           GRADE VARCHAR2(10);
           
           MINMARKS NUMBER := 0;
           MAXMARKS NUMBER := 100;
           LWBOUND NUMBER := 90;
           UPBOUND1 NUMBER := 89;
           LWBOUND1 NUMBER := 80;
           UPBOUND2 NUMBER := 79;
           LWBOUND2 NUMBER := 70;
           UPBOUND3 NUMBER := 69;
           LWBOUND3 NUMBER := 60;
           
           INVALID EXCEPTION;
           
BEGIN           
           
           STID := &STID;
           NAME := '&NAME';
           MARKS := &MARKS;

        
           
           IF MARKS < MINMARKS OR MARKS > MAXMARKS THEN
                RAISE INVALID;
           ELSIF MARKS BETWEEN LWBOUND AND MAXMARKS THEN 
                GRADE := 'A+';
           ELSIF MARKS BETWEEN LWBOUND1 AND UPBOUND1 THEN 
                GRADE := 'A';
           ELSIF MARKS BETWEEN LWBOUND2 AND UPBOUND2 THEN 
                 GRADE  := 'B'; 
           ELSIF MARKS BETWEEN LWBOUND3 AND UPBOUND3 THEN 
                GRADE := 'C';
           ELSE 
                GRADE := 'FAIL';
           END IF;
           
           INSERT INTO STUDENT_MARKS(STID, NAME, MARKS, GRADE)
           VALUES(STID, NAME, MARKS, GRADE);
           
           COMMIT;
           
           DBMS_OUTPUT.PUT_LINE('STID: '|| STID);
           DBMS_OUTPUT.PUT_LINE('NAME: '|| NAME);
           DBMS_OUTPUT.PUT_LINE('MAKRS: '|| MARKS);
           DBMS_OUTPUT.PUT_LINE('GRADE: '|| GRADE);
           
 EXCEPTION 
           WHEN VALUE_ERROR THEN
           DBMS_OUTPUT.PUT_LINE('NOT A VALID NUMBER');
           WHEN INVALID THEN
           DBMS_OUTPUT.PUT_LINE('ENTER A VALID MARK');
           
END;
/


           